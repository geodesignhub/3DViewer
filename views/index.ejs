<!DOCTYPE html>
<html>

<head>
    <title>Geodesign Hub OSM Buildings Viewer</title>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">

    <link type="text/css" rel="stylesheet" href="assets/css/bootstrap.min.css">
    <link rel="stylesheet" type="text/css" href="assets/css/style.css">
    <link rel="stylesheet" type="text/css" href="assets/css/base.css">
    <link rel="stylesheet" type="text/css" href="assets/css/leaflet.css">
    <link rel='shortcut icon' href='/assets/objs/favicon.ico' type='image/x-icon' />
    <link rel="stylesheet" href="/assets/OSMBuildings/OSMBuildings.css">
    <link rel="stylesheet" href="/assets/js/humane/flatty.css">
    <link href='https://fonts.googleapis.com/css?family=Open+Sans' rel='stylesheet' type='text/css'>
    <link href='https://fonts.googleapis.com/css?family=Raleway' rel='stylesheet' type='text/css'>
    <script type="text/javascript" src="/assets/js/jquery/jquery.min.js"></script>
    <script type="text/javascript" src="/assets/js/leaflet/leaflet.js"></script>
    <script type="text/javascript" src="/assets/js/svg/svg.min.js"></script>
    <script type="text/javascript" src="/assets/OSMBuildings/OSMBuildings.js"></script>
    <script type="text/javascript" src="/assets/js/geojsonlint/geojsonlint.js"></script>
    <script type="text/javascript" src="/assets/js/humane/humane.min.js"></script>
</head>

<body>
    <div class="container-fluid">
        <div class="row">

            <div class="col-sm-3 col-md-3 main">
                <h1 class="page-header">Geodesign Hub 3D Viewer</h1>
                <section class="information">
                    <p class="description">This plugin uses <a href="http://osmbuildings.org/" target="_blank">OSM Buildings</a> library for visualization and design data from <a href="http://www.geodesignhub.com/">Geodesign Hub</a>. See the <a href="https://github.com/geodesignhub/3DViewer">GitHub repository</a>.</p>
                    <br>
                    <!-- <br>
                    <div class="instruction">
                        <ol>
                            <li>Wait till the processing is complete</li>
                            <li>Turn on or off streets and systems</li>
                            <li>Click "Regenerate Scene" button to rebuild</li>

                        </ol>
                    </div> -->
                    <!-- <textarea id="gjTA" style="display:none" name="styled-textarea">Paste GeoJSON from Geodesign Hub here...</textarea> -->
                    <br>
                    <h4>Design</h4>
                    <div>
                        <div id="inputmap"></div>
                    </div>
                    <br>
                    <hr style=" margin-top:20px !important; margin-bottom:20px !important; " />
                    <div id="systemsCBCont" style="display:none">
                        <h4>Systems</h4>
                        <div id="systemsCB"></div>
                    </div>
                    <br>
                    <div class="glcontrol">
                        <h4>Map Controls</h4>
                        <span class="tilt">
                            <button class="dec">&#8601;</button>
                            <button class="inc">&#8599;</button>
                            </span>
                        <span class="rotation">
                            <button class="inc">&#8630;</button>
                            <button class="dec">&#8631;</button>
                            </span>
                        <span class="zoom">
                            <button class="dec">-</button>
                            <button class="inc">+</button>
                            </span>
                    </div><br>
                    <div id='downloadLink' style='display:none'>
                        <h4>Download</h4>
                        <div>
                            <p><button class="button buttongreen" onclick="downloadGJ()">Download Data</button></p>
                        </div>
                    </div>
                    <br>
                    <br>

                    <div id="drawing"></div>
                </section>

            </div>

            <div id="glMap" class="col-sm-9 col-md-9 sidebar">

            </div>

        </div>
    </div>



    <script>
        var glb = {};
        var osmb = new OSMBuildings({
            // baseURL: 'assets/OSMBuildings/',
            container: 'glMap',
            position: {
                latitude: 51.478496359866696,
                longitude: 0.2217864990234375
            },
            zoom: 16,
            minZoom: 12,
            maxZoom: 20,
            state: false, // stores map position/rotation in url
            attribution: '© 3D <a href="http://osmbuildings.org/copyright/">OSM Buildings</a>'
        });

        // osmb.addGeoJSONTiles('https://{s}.data.osmbuildings.org/0.2/anonymous/tile/{z}/{x}/{y}.json', {
        //     "color": "#ffe9ec",
        //     "fadeIn": true
        // });


        osmb.addMapTiles(
            'https://{s}.tiles.mapbox.com/v3/cygnus2936.curedn3y/{z}/{x}/{y}.png', {
                attribution: '© Data <a href="http://openstreetmap.org/copyright/">OpenStreetMap</a> · © Map <a href="http://mapbox.com">MapBox</a>'
            }
        );

        osmb.setTilt(25);
        var controlButtons = document.querySelectorAll('.glcontrol button');

        for (var i = 0, il = controlButtons.length; i < il; i++) {
            controlButtons[i].addEventListener('click', function(e) {
                var button = this;
                var parentClassList = button.parentNode.classList;
                var direction = button.classList.contains('inc') ? 1 : -1;
                var increment;
                var property;

                if (parentClassList.contains('tilt')) {
                    property = 'Tilt';
                    increment = direction * 10;
                }
                if (parentClassList.contains('rotation')) {
                    property = 'Rotation';
                    increment = direction * 10;
                }
                if (parentClassList.contains('zoom')) {
                    property = 'Zoom';
                    increment = direction * 1;
                }
                if (property) {
                    osmb['set' + property](osmb['get' + property]() + increment);
                }
            });
        }





        function generateSystemCB(systems) {
            for (var x = 0; x < systems.length; x++) {
                $('#systemsCB').append('<input name="sysCB" id=' + "'" + systems[x].sysname + "'" + 'type="checkbox" checked /> <span class="square c-' + systems[x].syscolor.substring(1) + '"></span>&nbsp;&nbsp;' + systems[x].sysname + '</input>&nbsp;&nbsp;');
            }
        }

        function setbg(color) {
            document.getElementById("styled").style.background = color;
        }

        function submitGJ() {
            var selectedsystems = [];
            $('#systemsCB input:checked').each(function() {
                selectedsystems.push($(this).attr('id'));
            });

            var gj = JSON.stringify(gjresults);
            // document.getElementById("gjTA").value;
            var gjerrors = geojsonhint.hint(gj);
            if (gjerrors.length > 0) {
                humane.log("The GeoJSON you have entered is invalid.. ", {
                    addnCls: 'humane-flatty-error'
                });
            } else {
                gj = JSON.parse(gj);
                start3dWorker(gj, selectedsystems);
                $("#loadingGIF").show();
            }
        }

        function start3dWorker(allFeaturesList, selectedsystems) {
            humane.log("Processing..", {
                addnCls: 'humane-flatty-info'
            });
            var threeDWorker = new Worker('/assets/workers/3dlib.js');
            threeDWorker.onerror = function(e) {
                console.log('Error: Line ' + e.lineno + ' in ' + e.filename + ': ' + e.message);
                $("#loadingGIF").hide();
                humane.log("There was a error in processing, please try again with a new geometry.. ", {
                    addnCls: 'humane-flatty-error'
                });
            };
            threeDWorker.postMessage({
                'allFeaturesList': JSON.stringify(allFeaturesList),
                'selectedsystems': JSON.stringify(selectedsystems)
            });
            threeDWorker.addEventListener('message', function(e) {

                if (e.data.mode === 'status') {
                    // update status. 
                    updateWorkerStatus(e.data.percentcomplete);
                } else {
                    generatedData = e.data.polygons;
                    var latlng = e.data.center;
                    // console.log(JSON.stringify(gjsonData));
                    setMapCenter(latlng);
                    updateGLData(generatedData);
                }

            }, false);
        }

        function updateWorkerStatus(percentcomplete) {
            var pc = percentcomplete.toString() + '% processing completed..'
            $("#procstatus").html(pc);

        }

        function setMapCenter(latlng) {
            ll = JSON.parse(latlng);
            osmb.setPosition({
                latitude: ll[0],
                longitude: ll[1]
            });

        }

        function guid() {
            function s4() {
                return Math.floor((1 + Math.random()) * 0x10000)
                    .toString(16)
                    .substring(1);
            }
            return s4() + s4() + '-' + s4() + '-' + s4() + '-' +
                s4() + '-' + s4() + s4() + s4();
        }

        function updateGLData(gjsonData) {
            $("#loadingGIF").hide();
            $("#downloadLink").show();
            $("#procstatus").html("Processing..");
            humane.log("Rendering Scene..", {
                addnCls: 'humane-flatty-success'
            });
            if (glb.gjLayer) {
                var k = glb.gjLayer;
                k.destroy();
                glb.gjLayer = "";
            }
            // var d = JSON.parse(gjsonData);
            // for (var k1 = 0; k1<d.features.length;k1++){
            //     var uuid = guid();
            //     var curfeat = d['features'][k1];
            //     if (curfeat.geometry.type==="Point"){
            //     osmb.addOBJ('assets/objs/ldhhouse.obj', { latitude: curfeat.geometry.coordinates[1], longitude: curfeat.geometry.coordinates[0]}, { id: uuid, color: 'red',scale:0.001});
            //     }
            // }

            var x = osmb.addGeoJSON(JSON.parse(gjsonData), {
                elevation: -10
            });
            glb.gjLayer = x;
        }
    </script>
</body>
<script>
    $("#loadingGIF").hide();
    var generatedData;
    var apitoken = "<%= apitoken  %>"; //var test is now assigned to getTest which will only work on browsers
    var projectid = "<%= projectid %>"; //var test is now assigned to getTest which will only work on browsers 
    var diagramid = "<%= diagramid %>"; //var test is now assigned to getTest which will only work on browsers 
    var synthesisid = "<%= synthesisid %>"; //var test is now assigned to getTest which will only work on browsers  
    var cteamid = "<%= cteamid %>"; //var test is now assigned to getTest which will only work on browsers   
    var systems = <%- systems %>; //var test is now assigned to getTest which will only work on browsers  
    var gjresults = <%- result %>;
    var bounds = <%- bounds %>;

    var inputmap = L.map('inputmap', {
        zoomControl: true,
        minZoom: 6,
        maxZoom: 18,
        scrollWheelZoom: false,
        dragging: false,
        zoomControl: false,
        doubleClickZoom: false, 
        attributionControl:false
    });
    // FeatureGroup is to store editable layers
    var designLayer = new L.FeatureGroup();

    var inputbaseLayer = L.tileLayer('https://cartodb-basemaps-{s}.global.ssl.fastly.net/light_all/{z}/{x}/{y}.png', {
        attribution: '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors, &copy; <a href="https://cartodb.com/attributions">CartoDB</a>',
        maxZoom: 18,
    }).addTo(inputmap);
    var latLngs = bounds.split(',');
    var southWest = L.latLng(latLngs[1], latLngs[0]);
    var northEast = L.latLng(latLngs[3], latLngs[2]);
    var mb = L.latLngBounds(southWest, northEast);
    inputmap.fitBounds(mb);

    var svgDrawing = SVG('drawing').size(10, 10);

    function miniMapstyleComp(feature) {
        // console.log(feature.properties)
        var curFeature = feature.geometry.type;
        if (curFeature === 'LineString') {
            // console.log(feature)
            return {
                weight: 2,
                opacity: .9,
                color: feature.properties.color,
                dashArray: '',

            };
        } else {
            // var fillColor = getColor(feature.properties.areatype);

            if (feature.properties.areatype == 'project') {
                var fillColor = feature.properties.color;
            } else { // it is policy
                var fillPattern = setSVGStyle(feature.properties.color);
                var fillColor = fillPattern;
            }

            return {
                // fillColor: feature.properties.color,
                // fillColor:'#333333',
                weight: 1,
                stroke: true,
                opacity: 0.9,
                fillColor: fillColor,
                color: feature.properties.color,
                dashArray: '',
                // opacity: 0.2,
                fillOpacity: 0.8,
            };
        }

    }

    function setSVGStyle(reqColor) {
        var pattern = svgDrawing.pattern(6, 6, function(add) {
            // add.rect(5, 5).fill(reqColor)
            add.line(0, 0, 6, 6).stroke({
                width: 1,
                color: reqColor
            })
            add.line(6, 0, 0, 6).stroke({
                width: 1,
                color: reqColor
            })
        });
        return pattern.fill();
    }

    function getColor(type) {

        return type === 'policy' ? '#707070 ' :
            type === 'project' ? '#a69695 ' :
            type === 'red2' ? '#bd0026' :
            type === 'red' ? '#f03b20' :
            type === 'yellow' ? '#FFFF00' :
            type === 'green' ? '#74c476' :
            type === 'green2' ? '#31a354' :
            type === 'green3' ? '#006d2c' :
            type === 'purple' ? '#CFACF7' :
            type === 'purple2' ? '#8D6CBF' :
            type === 'purple3' ? '#601286' :
            type === 'orange' ? '#FFA927' :
            type === 'orange2' ? '#F8872E' :
            type === 'orange3' ? '#FC6B0A' :
            type === 'constraints' ? '#343434' :
            type === 'boundaries' ? '#a6cee3' :
            type === 'boundaries2' ? '#b2df8a' :
            '#808080';
    }


    function onEachFeature(feature, layer) {
        // does this feature have a property named popupContent?
        if (feature.properties && feature.properties.description) {
            layer.bindPopup(feature.properties.description);
        }
    }
    L.geoJSON(gjresults, {
        onEachFeature: onEachFeature,
        style: miniMapstyleComp,
    }).addTo(inputmap);

    (function() {
        if ((apitoken !== "0" && projectid !== "0" && diagramid !== "0")) {
            // it is synthesis. 
            if (gjresults.features.length > 0) {
                // $("#gjTA").text(JSON.stringify(gjresults));
                submitGJ();
            }
        } else if (apitoken !== "0" && projectid !== "0" && cteamid !== "0" && synthesisid !== "0") {

            if (gjresults.features.length > 0) {
                // $("#gjTA").text(JSON.stringify(gjresults));
                generateSystemCB(systems);
                $('#systemsCBCont').show();
                submitGJ();
                $('#systemsCB').click(function() {
                    var selectedsystems = [];
                    $('#systemsCB input:checked').each(function() {
                        selectedsystems.push($(this).attr('id'));
                    });

                    $("#loadingGIF").show();
                    var constrainWorker = new Worker('/assets/workers/constrainGeneratedFeatures.js');
                    constrainWorker.onerror = function(e) {
                        console.log('Error: Line ' + e.lineno + ' in ' + e.filename + ': ' + e.message);
                        $("#loadingGIF").hide();
                        humane.log("There was a error in processing, please try again.. ", {
                            addnCls: 'humane-flatty-error'
                        });
                    };
                    // console.log(selectedsystems);
                    constrainWorker.postMessage({
                        'allFeaturesList': generatedData,
                        'selectedsystems': JSON.stringify(selectedsystems),

                    });
                    constrainWorker.addEventListener('message', function(e) {
                        if (e.data.mode === 'status') {

                            updateWorkerStatus(e.data.percentcomplete);
                        } else {
                            updateGLData(e.data.polygons);
                        }
                    }, false);

                });
            }
        }
    })();
    (function(console) {
        console.save = function(data, filename) {
            if (!data) {
                console.error('Console.save: No data')
                return;
            }
            if (!filename) filename = 'generatedfootprints.geojson'
            if (typeof data === "object") {
                data = JSON.stringify(data, undefined, 4)
            }
            var blob = new Blob([data], {
                    type: 'text/json'
                }),
                e = document.createEvent('MouseEvents'),
                a = document.createElement('a')
            a.download = filename
            a.href = window.URL.createObjectURL(blob)
            a.dataset.downloadurl = ['text/json', a.download, a.href].join(':')
            e.initMouseEvent('click', true, false, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null)
            a.dispatchEvent(e)
        }
    })(console)

    function downloadGJ() {
        // filter out streets
        var gd = JSON.parse(generatedData);
        var filteredGJ = {
            "type": "FeatureCollection",
            "features": []
        };
        var gendataFeatlen = gd.features.length;
        for (var k = 0; k < gendataFeatlen; k++) {
            var curFeat = gd.features[k];
            var prop = curFeat.properties;
            if (prop.isStreet) {} else {
                filteredGJ.features.push(curFeat);
            }
        }
        console.save(filteredGJ);

    }
</script>

</html>