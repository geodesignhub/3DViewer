<!DOCTYPE html>
<html>

<head>
    <title>Geodesignhub OSM Buildings Viewer</title>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">

    <link type="text/css" rel="stylesheet" href="assets/css/bootstrap.min.css">
    <link rel="stylesheet" type="text/css" href="assets/css/style.css">
    <link rel="stylesheet" type="text/css" href="assets/css/base.css">
    <link rel="stylesheet" type="text/css" href="assets/css/leaflet.css">
    <link rel='shortcut icon' href='/assets/objs/favicon.ico' type='image/x-icon' />
    <link rel="stylesheet" href="/assets/css/maplibre-gl/maplibre-gl.css">
    <link rel="stylesheet" href="/assets/js/humane/flatty.css">

    <link href='https://fonts.googleapis.com/css?family=Open+Sans' rel='stylesheet' type='text/css'>
    <link href='https://fonts.googleapis.com/css?family=Raleway' rel='stylesheet' type='text/css'>
    <script type="text/javascript" src="/assets/js/jquery/jquery.min.js"></script>
    <script type="text/javascript" src="/assets/js/leaflet/leaflet.js"></script>
    <script type="text/javascript" src="/assets/js/svg/svg.min.js"></script>
    <script type="text/javascript" src="/assets/maplibre-gl-js/maplibre-gl.js"></script>
    <script type="text/javascript" src="/assets/js/geojsonlint/geojsonlint.js"></script>
    <script type="text/javascript" src="/assets/js/humane/humane.min.js"></script>
</head>

<body>
    <div class="container-fluid">
        <div class="row">

            <div class="col-sm-3 col-md-3 main">
                <h1 class="page-header">Geodesignhub 3D Viewer</h1>
                <section class="information">
                    <p class="description">This plugin uses buildings data from openstreetmap for visualization and
                        design data from Geodesignhub. See the <a href="https://github.com/geodesignhub/3DViewer">GitHub
                            repository</a> for more information.</p>

                    <br>
                    <h4>Design</h4>
                    <div>
                        <div id="inputmap"></div>
                    </div>

                    <br>
                    <div id="systemsCBCont">
                        <h4>Systems</h4>
                        <div id="systemsCB"></div>
                        <br>

                        <div><input class="policies_cb" name="show_policies" id='show_policies' type="checkbox"
                                checked /> Show
                            Policies</input></div>
                    </div>
                    <br><br>



                    <hr>

                    <div id="search-results"></div>

                    <small id="procstatus"></small>

                    <br>
                    <br>
                </section>

            </div>

            <div id="glMap" class="col-sm-9 col-md-9 sidebar">
                <div id="map"></div>

            </div>

        </div>
    </div>

    <script>

        var map = new maplibregl.Map({
            style:
                'https://api.maptiler.com/maps/streets/style.json?key=<%= maptiler_key %>',
            center: [-74.0066, 40.7135],
            zoom: 15.5,
            pitch: 45,
            bearing: -17.6,
            container: 'map',
            antialias: true
        });

        // The 'building' layer in the streets vector source contains building-height
        // data from OpenStreetMap.
        map.on('load', function () {

            map.addSource('gdh-buildings', {
                type: 'geojson',
                data: {
                    "type": "FeatureCollection",
                    "features": []
                }
            });
            map.addSource('currentBuildings', {
                type: 'geojson',
                data: {
                    "type": "FeatureCollection",
                    "features": []
                }
            });
            map.addLayer({
                "id": "highlight",
                "source": "currentBuildings",
                'type': 'line',
                'minzoom': 15,
                'paint': {
                    'line-color': '#f00',
                    'line-width': 3
                }
            });

            map.addLayer({
                'id': 'gdh-building-extrusion',
                'type': 'fill-extrusion',
                'source': 'gdh-buildings',
                'paint': {
                    // See the MapLibre Style Specification for details on data expressions.
                    // https://maplibre.org/maplibre-gl-js-docs/style-spec/expressions/

                    // Get the fill-extrusion-color from the source 'color' property.
                    'fill-extrusion-color': ['get', 'color'],

                    // Get fill-extrusion-height from the source 'height' property.
                    'fill-extrusion-height': ['get', 'height'],

                    // Get fill-extrusion-base from the source 'base_height' property.
                    'fill-extrusion-base': ['get', 'base_height'],

                    // Make extrusions slightly opaque for see through indoor walls.
                    'fill-extrusion-opacity': 0.5
                }
            });

            map.on('click', function (e) {
                var features = map.queryRenderedFeatures(e.point, { layers: ['gdh-building-extrusion'] });

                if (!features.length) {
                    const $resultList = $('#search-results');
                    $resultList.empty();
                    return;

                }
                var feature = features[0];
                showInfoPopup([feature] || []);

            });

            // Change the cursor to a pointer when the mouse is over the places layer.
            map.on('mouseenter', 'gdh-building-extrusion', function () {
                map.getCanvas().style.cursor = 'pointer';
            });

            // Change it back to a pointer when it leaves.
            map.on('mouseleave', 'gdh-building-extrusion', function () {
                map.getCanvas().style.cursor = '';
            });

            
            map.addControl(new maplibregl.NavigationControl());

            const gj = JSON.stringify(gjresults);
            var gjerrors = geojsonhint.hint(gj);
            if (gjerrors.length > 0) {
                humane.log("The GeoJSON you have entered is invalid.. ", {
                    addnCls: 'humane-flatty-error'
                });
            } else {
                start3dWorker(gjresults, selectedsystems);
                // $("#loadingGIF").show();
                $("#procstatus").show();
            }
        });


        function generateSystemCB(systems) {
            for (var x = 0; x < systems.length; x++) {
                $('#systemsCB').append('<input class="chekbox" name="sysCB" id=' + "'" + systems[x].name + "'" +
                    'type="checkbox" checked /> <span class="square c-' + systems[x].color.substring(1) +
                    '"></span>&nbsp;&nbsp;' + systems[x].name + '</input>&nbsp;&nbsp;');
            }
        }

        function setbg(color) {
            document.getElementById("styled").style.background = color;
        }

        function start3dWorker(allFeaturesList, selectedsystems) {
            humane.log("Processing..", {
                addnCls: 'humane-flatty-info'
            });

            var threeDWorker = new Worker('/assets/workers/3dlib.js');
            threeDWorker.onerror = function (e) {
                console.log('Error: Line ' + e.lineno + ' in ' + e.filename + ': ' + e.message);
                // $("#loadingGIF").hide();
                $("#procstatus").hide();
                humane.log("There was a error in processing, please try again with a new geometry.. ", {
                    addnCls: 'humane-flatty-error'
                });
            };
            threeDWorker.postMessage({
                'allFeaturesList': JSON.stringify(allFeaturesList),
                'selectedsystems': JSON.stringify(selectedsystems)
            });
            threeDWorker.addEventListener('message', function (e) {

                if (e.data.mode === 'status') {
                    // update status. 
                    updateWorkerStatus(e.data.percentcomplete);
                } else {

                    generatedData = e.data.polygons;
                    var latlng = e.data.center;

                    setMapCenter(latlng);
                    updateGLData(generatedData);
                }
            }, false);
        }

        function updateWorkerStatus(percentcomplete) {
            var pc = percentcomplete.toString() + '% processing completed..'
            $("#procstatus").html(pc);

        }

        function setMapCenter(latlng) {
            ll = JSON.parse(latlng);

            map.setCenter({
                lat: ll[0],
                lon: ll[1]
            });

        }

        function guid() {
            function s4() {
                return Math.floor((1 + Math.random()) * 0x10000)
                    .toString(16)
                    .substring(1);
            }
            return s4() + s4() + '-' + s4() + '-' + s4() + '-' +
                s4() + '-' + s4() + s4() + s4();
        }

        function updateGLData(gjsonData) {
            // $("#loadingGIF").hide();
            $("#procstatus").hide();
            $("#downloadLink").show();
            $("#procstatus").html("Processing..");
            humane.log("Rendering Scene..", {
                addnCls: 'humane-flatty-success'
            });
            const gjData = JSON.parse(gjsonData);

            map.getSource('gdh-buildings').setData(gjData);

        }


    </script>
</body>
<script>
    // $("#loadingGIF").hide();
    $("#procstatus").hide();
    var generatedData;
    var apitoken = "<%= apitoken  %>"; //var test is now assigned to getTest which will only work on browsers
    var projectid = "<%= projectid %>"; //var test is now assigned to getTest which will only work on browsers 
    var synthesisid = "<%= synthesisid %>"; //var test is now assigned to getTest which will only work on browsers  
    var cteamid = "<%= cteamid %>"; //var test is now assigned to getTest which will only work on browsers   
    var systems = <%- systems %>; //var test is now assigned to getTest which will only work on browsers  
    var gjresults = <%- result %>;
    var bounds = <%- bounds %>;

    var inputmap = L.map('inputmap', {
        zoomControl: true,
        minZoom: 6,
        maxZoom: 18,
        scrollWheelZoom: false,
        dragging: false,
        zoomControl: false,
        doubleClickZoom: false,
        attributionControl: false
    });
    // FeatureGroup is to store editable layers
    var designLayer = new L.FeatureGroup();
    var inputbaseLayer = L.tileLayer('https://{s}.basemaps.cartocdn.com/rastertiles/light_all/{z}/{x}/{y}.png', {
        attribution: '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors, &copy; <a href="https://cartodb.com/attributions">CartoDB</a>',
        maxZoom: 18,
    }).addTo(inputmap);
    var latLngs = bounds.split(',');
    var southWest = L.latLng(latLngs[1], latLngs[0]);
    var northEast = L.latLng(latLngs[3], latLngs[2]);
    var mb = L.latLngBounds(southWest, northEast);
    inputmap.fitBounds(mb);

    

    const to_check_prefix = ["road-", "bldg-", "plcy-"];
    
    const $resultList = $('#search-results');

    function showInfoPopup(features) {
        $resultList.empty();
        features.forEach(feature => {
            $resultList.append(renderFeatureInfo(feature));
        });

        const allRanges = document.querySelectorAll(".range-wrap");
        allRanges.forEach(wrap => {
            const range = wrap.querySelector(".range");
            const bubble = wrap.querySelector(".bubble");

            range.addEventListener("input", () => {
                setBubble(range, bubble);
            });
            setBubble(range, bubble);
        });

        function setBubble(range, bubble) {
            const val = range.value;
            const min = range.min ? range.min : 0;
            const max = range.max ? range.max : 100;
            const newVal = Number(((val - min) * 100) / (max - min));
            bubble.innerHTML = val;
            // Sorta magic numbers based on size of the native UI thumb
            bubble.style.left = `calc(${newVal}% + (${8 - newVal * 0.15}px))`;
        }
    }
    function renderFeatureInfo(feature) {
        const featprops = feature.properties;
        const container = document.createElement('div');

        if (featprops.isPolicy === 0 && featprops.isStreet === 0) {
            for (let key in feature.properties) {
                if (typeof feature.properties[key] === 'object') continue;

                if (key === 'height') {
                    const heading = document.createElement('h4');
                    heading.textContent = 'Set Floors';
                    container.appendChild(heading);

                    const rangeWrap = document.createElement('div');
                    rangeWrap.className = 'range-wrap';

                    const rangeInput = document.createElement('input');
                    rangeInput.type = 'range';
                    rangeInput.className = 'range';
                    rangeInput.id = `${feature.properties.id}-floors-id`;
                    rangeInput.value = Math.ceil(feature.properties[key] / 3.5);
                    rangeInput.setAttribute('onchange', `updateBuildingFloors('${feature.properties.id}')`);

                    const outputBubble = document.createElement('output');
                    outputBubble.className = 'bubble';

                    rangeWrap.appendChild(rangeInput);
                    rangeWrap.appendChild(outputBubble);
                    container.appendChild(rangeWrap);

                    break;
                }
            }
        } else {
            container.textContent = 'Not a building';
        }

        return container;
    }


    var svgDrawing = SVG().addTo('body').size(10, 10);

    function updateBuildingFloors(featureId) {
        const buildingFloorsElement = document.getElementById(`${featureId}-floors-id`);
        const floorsToMeters = Math.ceil(buildingFloorsElement.value * 3.5);
        const updatedProperties = {
            id: featureId,
            height: floorsToMeters
        };

        const updateFeatureWorker = new Worker('/assets/workers/updateFeatureProperties.js');

        updateFeatureWorker.onerror = function (error) {
            console.error(`Error: Line ${error.lineno} in ${error.filename}: ${error.message}`);
            $("#procstatus").hide();
            humane.log("An error occurred during processing. Please try again.", {
                addnCls: 'humane-flatty-error'
            });
        };

        updateFeatureWorker.postMessage({
            allFeaturesList: generatedData,
            updated_properties: JSON.stringify([updatedProperties])
        });

        updateFeatureWorker.addEventListener('message', function (event) {
            if (event.data.mode === 'status') {
                updateWorkerStatus(event.data.percentcomplete);
            } else {
                generatedData = event.data.polygons;
                runConstrainWorker();
            }
        });
    }
    function miniMapstyleComp(feature) {
        const { type: geometryType } = feature.geometry;
        const { areatype, color } = feature.properties;

        if (geometryType === 'LineString') {
            return {
                weight: 2,
                opacity: 0.9,
                color: color,
                dashArray: '',
            };
        }

        const fillColor = areatype === 'project' ? color : setSVGStyle(color);

        return {
            weight: 1,
            stroke: true,
            opacity: 0.9,
            fillColor: fillColor,
            color: color,
            dashArray: '',
            fillOpacity: 0.8,
        };
    }

    function setSVGStyle(reqColor) {
        var pattern = svgDrawing.pattern(6, 6, function (add) {
            // add.rect(5, 5).fill(reqColor)
            add.line(0, 0, 6, 6).stroke({
                width: 1,
                color: reqColor
            })
            add.line(6, 0, 0, 6).stroke({
                width: 1,
                color: reqColor
            })
        });
        return pattern;
    }

    function getColor(type) {
        const colorMap = {
            'policy': '#707070',
            'project': '#a69695',
            'red2': '#bd0026',
            'red': '#f03b20',
            'yellow': '#FFFF00',
            'green': '#74c476',
            'green2': '#31a354',
            'green3': '#006d2c',
            'purple': '#CFACF7',
            'purple2': '#8D6CBF',
            'purple3': '#601286',
            'orange': '#FFA927',
            'orange2': '#F8872E',
            'orange3': '#FC6B0A',
            'constraints': '#343434',
            'boundaries': '#a6cee3',
            'boundaries2': '#b2df8a'
        };

        return colorMap[type] || '#808080';
    }


    function onEachFeature(feature, layer) {
        // does this feature have a property named popupContent?
        if (feature.properties && feature.properties.description) {
            layer.bindPopup(feature.properties.description);
        }
    }
    L.geoJSON(gjresults, {
        onEachFeature: onEachFeature,
        style: miniMapstyleComp,
        pointToLayer: pointToLayerEnlarged,

    }).addTo(inputmap);


    function pointToLayerEnlarged(feature, latlng) {

        return L.circle(latlng, 5, {
            // radius: 8,
            // fillColor: "#ff7800",
            color: "#000",
            weight: 1,
            opacity: 0.1,
            fillOpacity: 0.5
        });

    };
    function runConstrainWorker() {
        const selectedSystems = $('#systemsCB input:checked').map(function () {
            return $(this).attr('id');
        }).get();

        const showPolicies = document.getElementById("show_policies").checked ? 1 : 0;

        $("#procstatus").show();

        const constrainWorker = new Worker('/assets/workers/constrainGeneratedFeatures.js');

        constrainWorker.onerror = function (e) {
            console.error(`Error: Line ${e.lineno} in ${e.filename}: ${e.message}`);
            $("#procstatus").hide();
            humane.log("There was an error in processing, please try again.", {
                addnCls: 'humane-flatty-error'
            });
        };

        constrainWorker.postMessage({
            allFeaturesList: generatedData,
            selectedsystems: JSON.stringify(selectedSystems),
            showpolicies: JSON.stringify(showPolicies)
        });

        constrainWorker.addEventListener('message', function (e) {
            if (e.data.mode === 'status') {
                updateWorkerStatus(e.data.percentcomplete);
            } else {
                updateGLData(e.data.polygons);
            }
        });
    }
    (function (console) {
        console.save = function (data, filename = 'generatedfootprints.geojson') {
            if (!data) {
                console.error('Console.save: No data');
                return;
            }

            const jsonData = typeof data === "object" ? JSON.stringify(data, undefined, 4) : data;
            const blob = new Blob([jsonData], { type: 'application/json' });
            const a = document.createElement('a');

            a.download = filename;
            a.href = URL.createObjectURL(blob);
            a.dataset.downloadurl = ['application/json', a.download, a.href].join(':');

            const event = new MouseEvent('click', { bubbles: true, cancelable: true, view: window });
            a.dispatchEvent(event);
        };
    })(console);

    function downloadGJ() {
        const gd = JSON.parse(generatedData);
        const filteredGJ = {
            "type": "FeatureCollection",
            "features": gd.features.filter(feature => !feature.properties.isStreet)
        };
        console.save(filteredGJ);
    }

    generateSystemCB(systems);
    var selectedsystems = [];
    $('#systemsCB input:checked').each(function () {
        selectedsystems.push($(this).attr('id'));
    });

    // document.getElementById("gjTA").value;

    $(".chekbox").change(function () {
        runConstrainWorker()
    });
    $(".policies_cb").change(function () {
        runConstrainWorker()
    });



    function pad(v) {
        return (v < 10 ? '0' : '') + v;
    }

</script>

</html>